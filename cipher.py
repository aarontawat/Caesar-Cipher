import argparse

def parse_command_line():
    """
    Parse the command line arguments and return the parse_args object.
    
    There should be 1 positional argument and 6 optional arguments.
    The help message generated by the parser should look like:
    
    usage: cipher.py [-h] [-o outfile_path] [-k KEY] [-d] [-a] [-v] infile

    positional arguments:
      infile                input file to be encrypted or decrypted

    optional arguments:
      -h, --help            show this help message and exit
      -o outfile_path, --outfile outfile_path
                            output file
      -k KEY, --key KEY     encryption/decryption key (must be positive) (default
                            = 1)
      -d, --decrypt         decrypt the input file
      -a, --all             decrypt using all keys [1, 25], save outputs in
                            different files. (useful in case the key is lost or
                            unknown)
      -v, --verbose         verbose mode


    args:
        None
        
    returns:
        args: generated argparse object with all the passed command line arguments      
    """
    
    #TODO:
    # define an argument parser object
    parser = argparse.ArgumentParser()
    # Add positional arguments
    parser.add_argument('infile', action='store', help='input file to be encrypted or decrypted')
    # Add optional arguments
    parser.add_argument('-o', '--outfile_path', action='store', help='output file')
    parser.add_argument('-k', '--key', action='store', type=int, default=1, help='encryption/decryption key (must be positive) (default = 1)')
    parser.add_argument('-d', '--decrypt', action='store_true', help='decrypt the input file')
    parser.add_argument('-a','--all', action='store_true', help='decrypt using all keys [1, 25], save outputs indifferent files. (useful in case the key is lost or unknown)')
    parser.add_argument('-v','--verbose', action='store_true', help='verbose mode')
    # parse command line arguments
    args = parser.parse_args()
    return args


def main():
    # parse command line arguments
    args = parse_command_line()


if __name__ == '__main__':
    main()
